generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleTypes {
  USER
  ADMIN

  @@map("role_types")
}

enum AuthProvider {
  GOOGLE
  APPLE
  EMAIL
  PHONE

  @@map("auth_provider")
}

enum TrainingFrequency {
  ZERO_TO_TWO
  THREE_TO_FIVE
  SIX_PLUS

  @@map("training_frequency")
}

enum Goal {
  GAIN
  MAINTAIN
  LOSE

  @@map("goal")
}

enum GoalBlocker {
  CONSISTENCY
  EATING_HABITS
  SUPPORT
  SCHEDULE

  @@map("goal_bocker")
}

enum MealFrequency {
  TWO_TIMES
  THREE_TIMES
  FOUR_TIMES
  FIVE_OR_MORE

  @@map("meal_frequency")
}

enum FitnesGoal {
  EAT_AND_LIVE_HEALTHIER
  BOOST_ENERGY_AND_MOOD
  STAY_MOTIVATED_AND_CONSISTENT
  FEEL_BETTER_ABOUT_BODY

  @@map("fitnes_goal")
}

enum FoodEntryType {
  IMAGE
  BARCODE
  AUDIO
  TEXT

  @@map("food_entry_type")
}

model User {
  id                String             @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  fullname          String?            @map("fullname") @db.VarChar(100)
  password          String?            @map("password")
  phone             String?            @map("phone")
  email             String?            @map("email")
  firebaseId        String?            @map("firebase_user_id")
  appleId           String?            @map("apple_user_id")
  photoUrl          String?            @map("email_photo_url")
  language          String?            @map("language")
  isOnboarded       Boolean            @default(false) @map("is_onboarded")
  provider          AuthProvider?      @map("provider")
  gender            String?            @map("gender")
  source            String?            @map("source")
  role              RoleTypes          @default(USER) @map("role")
  height            Int?               @map("height")
  weight            Float?             @map("weight")
  birthday          DateTime?          @map("birthday")
  goal              Goal?              @map("goal")
  targetWeight      Float?             @map("target_weight")
  mealFrequency     MealFrequency?     @map("meal_frequency")
  trainingFrequency TrainingFrequency? @map("training_frequency")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  nutritionTarget NutritionTarget?

  weightLogs       WeightLog[]
  foodNutritions   FoodNutrition[]
  dailyNutritions  DailyNutritionLog[]
  goalBlocker      UserGoalBlocker[]
  fitnesGoal       UserFitnesGoal[]
  healthConditions UserHealthCondition[]
  healthChats      HealthChat[]

  @@id([id])
  @@unique([firebaseId])
  @@unique([appleId])
  @@index([email])
  @@index([phone])
  @@index([firebaseId])
  @@index([appleId])
  @@map("users")
}

model UserGoalBlocker {
  id      String      @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  userId  String      @map("user_id") @db.Uuid
  blocker GoalBlocker @map("blocker")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, blocker])
  @@map("user_goal_blockers")
}

model UserFitnesGoal {
  id     String     @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  userId String     @map("user_id") @db.Uuid
  goal   FitnesGoal @map("goal")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, goal])
  @@map("user_fitnes_goals")
}

model UserHealthCondition {
  id          String  @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  userId      String  @map("user_id") @db.Uuid
  name        String  @map("name") @db.VarChar(255)
  description String? @map("description") @db.Text

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([id])
  @@index([userId])
  @@map("user_health_conditions")
}

model WeightLog {
  id     String @default(dbgenerated("GEN_RANDOM_UUID()")) @map("id") @db.Uuid
  weight Float  @map("weight")
  userId String @map("user_id") @db.Uuid

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp

  user User @relation(fields: [userId], references: [id])

  @@id([id])
  @@index([userId])
  @@map("weight_logs")
}

model NutritionTarget {
  id       String @default(dbgenerated("GEN_RANDOM_UUID()")) @db.Uuid
  calories Int    @map("calories")
  carbs    Int    @map("carbs")
  protein  Int    @map("protein")
  fat      Int    @map("fat")
  userId   String @unique @map("user_id") @db.Uuid

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  @@id([id])
  @@index([userId])
  @@map("nutrition_target")
}

model FoodNutrition {
  id           String         @default(dbgenerated("GEN_RANDOM_UUID()")) @db.Uuid
  mealName     String?        @map("meal_name")
  calories     Float          @default(0) @map("calories")
  carbs        Float          @default(0) @map("carbs")
  protein      Float          @default(0) @map("protein")
  fat          Float          @default(0) @map("fat")
  fiber        Float?         @default(0) @map("fiber")
  sugar        Float?         @default(0) @map("sugar")
  sodium       Float?         @default(0) @map("sodium")
  image        String?        @map("image")
  type         FoodEntryType  @map("type")
  userId       String         @map("user_id") @db.Uuid

  // Health Analysis fields
  healthStatus String?        @map("health_status") @db.VarChar(20) // NORMAL, WARNING, CAUTION
  healthAlert  String?        @map("health_alert") @db.Text
  healthDetails String?       @map("health_details") @db.Text

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  user User @relation(fields: [userId], references: [id])

  ingredients FoodIngredient[]

  @@id([id])
  @@index([userId])
  @@map("food_nutrition")
}

model FoodIngredient {
  id           String  @default(dbgenerated("GEN_RANDOM_UUID()")) @db.Uuid
  name         String  @map("name")
  portion      String? @map("portion")
  portionGrams Float?  @map("portion_grams")
  calories     Float   @default(0) @map("calories")
  carbs        Float   @default(0) @map("carbs")
  protein      Float   @default(0) @map("protein")
  fat          Float   @default(0) @map("fat")
  fiber        Float?  @default(0) @map("fiber")
  sugar        Float?  @default(0) @map("sugar")
  sodium       Float?  @default(0) @map("sodium")
  mealId       String  @map("meal_id") @db.Uuid

  meal FoodNutrition @relation(fields: [mealId], references: [id])

  @@id([id])
  @@map("food_ingredient")
}

model DailyNutritionLog {
  id       String   @default(dbgenerated("GEN_RANDOM_UUID()")) @db.Uuid
  calories Int      @default(0) @map("calories")
  carbs    Int      @default(0) @map("carbs")
  protein  Int      @default(0) @map("protein")
  fat      Int      @default(0) @map("fat")
  fiber    Int      @default(0) @map("fiber")
  sugar    Int      @default(0) @map("sugar")
  sodium   Int      @default(0) @map("soduim")
  link     String?  @map("link")
  date     DateTime @map("date")
  userId   String   @map("user_id") @db.Uuid

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  user User @relation(fields: [userId], references: [id])

  @@id([id])
  @@unique([date, userId])
  @@map("daily_nutrition_log")
}

model HealthChat {
  id      String @default(dbgenerated("GEN_RANDOM_UUID()")) @db.Uuid
  userId  String @map("user_id") @db.Uuid
  history Json   @default("[]") @map("history")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([id])
  @@index([userId])
  @@map("health_chats")
}
